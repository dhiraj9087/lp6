#include<iostream>
#include<omp.h>

using namespace std;

void bubble(int array[], int n){
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(array[j]>array[j+1]){
                swap(array[j],array[j+1]);
            }
        }
    }
}

void pBubble(int arr[],int n){
    // odd index
    #pragma omp parallel
    for(int i=0;i<n;++i){
        #pragma omp for
        for(int j=1;j<n;j+=2){
            if(arr[j]<arr[j-1]){
                swap(arr[j],arr[j-1]);
            }
        }

        // #pragma omp barrier

    // even index
    #pragma omp for
    for(int j=2;j<n;j+=2){
        if(arr[j]<arr[j-1]){
            swap(arr[j],arr[j-1]);
        }
    }
    }
    
    
}

void printArray(int arr[],int n){
    for(int i=0;i<n;i++) cout<<arr[i]<<" ";
    cout<<"\n";
}

int main(){
    int n = 100000;
    int arr[n];
    double start_time,end_time;

    for(int i=0,j=n;i<n;i++,j--){
        arr[i]=j;

    }
    start_time = omp_get_wtime();
    bubble(arr,n);
    end_time = omp_get_wtime();
    cout << "Sequential Bubble Sort took : " << end_time - start_time << " seconds.\n";
    // printArray(arr, n);

    for(int i = 0, j = n; i < n; i++, j--) arr[i] = j;


    start_time = omp_get_wtime();
    pBubble(arr,n);
    end_time = omp_get_wtime();
    cout << "Paralle Bubble Sort took : " << end_time - start_time << " seconds.\n";
    // printArray(arr, n);


}
