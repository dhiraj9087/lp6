#include<iostream>
#include<omp.h>

using namespace std;

int minimum(int arr[], int n){
    int mini = arr[0];
    #pragma omp parallel for reduction(min:mini)
    for(int i=0;i<n;i++){
        if(mini>arr[i]){
            mini = arr[i];
        }
    }
    return mini;
}

int maximum(int arr[], int n){
    int maxi = arr[0];
    #pragma omp parallel for reduction(max:maxi)
    for(int i=0;i<n;i++){
        if(maxi<arr[i]){
            maxi = arr[i];
        }
    }
    return maxi;
}

int addition(int arr[], int n){
    int sum = arr[0];
    #pragma omp parallel for reduction( + :sum)
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    return sum;
}


int average(int arr[], int n){
    return (double)addition(arr,n) / n;
}

int main(){
    int n = 10;
    int arr[] = {1,2,3,4,5,6,7,8,9,10};
    cout<<minimum(arr,n)<< " "<< maximum(arr,n)<<" "<< addition(arr,n)<<" "<<average(arr,n);
    return 0;
}
