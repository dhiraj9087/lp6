#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>

using namespace std;

class Graph{
    int V;
    vector<vector<int>> adj;

    public:
    Graph(int V): V(V), adj(V){}

    void addEdge(int v,int w){
        adj[v].push_back(w);
    }

    void dfsil(int start, vector<bool> &visited){
        visited[start] = true;
        cout<<start<<" ";
        for(int n : adj[start]){
            if(!visited[n]){
                dfsil(n,visited);
            }
        }
    }

    void dfs(int start){
        vector<bool> visited(V,false);
        dfsil(start,visited);
    }

    void bfs(int start){
        vector<bool> visited(V,false);
        queue<int> q;
        visited[start] = true;
        q.push(start);
        while (!q.empty())
        {
            int v = q.front();
            q.pop();
            cout<<v<<" ";
            #pragma omp parallel for
            for(int i=0;i<adj[v].size();i++){
                int n = adj[v][i];
                if (!visited[n]){
                    visited[n]=true;
                    q.push(n);
                }
            }
        }
        
    }



};

int main(){
    Graph g(7);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(1,4);
    g.addEdge(2,5);
    g.addEdge(2,6);

    g.dfs(0);
    cout<<endl;
    g.bfs(0);
    return 0;

}
